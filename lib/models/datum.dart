// ignore_for_file: constant_identifier_names

class Datum {
    final int id;
    final String name;
    final Type type;
    final HumanReadableCardType humanReadableCardType;
    final FrameType frameType;
    final String desc;
    final Race race;
    final String? archetype;
    final String ygoprodeckUrl;
    final List<CardSet>? cardSets;
    final List<CardImage> cardImages;
    final List<CardPrice> cardPrices;
    final List<Typeline>? typeline;
    final int? atk;
    final int? def;
    final int? level;
    final Attribute? attribute;
    final String? pendDesc;
    final String? monsterDesc;
    final int? scale;
    final int? linkval;
    final List<Linkmarker>? linkmarkers;
    final BanlistInfo? banlistInfo;

    Datum({
        required this.id,
        required this.name,
        required this.type,
        required this.humanReadableCardType,
        required this.frameType,
        required this.desc,
        required this.race,
        this.archetype,
        required this.ygoprodeckUrl,
        this.cardSets,
        required this.cardImages,
        required this.cardPrices,
        this.typeline,
        this.atk,
        this.def,
        this.level,
        this.attribute,
        this.pendDesc,
        this.monsterDesc,
        this.scale,
        this.linkval,
        this.linkmarkers,
        this.banlistInfo,
    });

    factory Datum.fromJson(Map<String, dynamic> json) => Datum(
        id: json["id"],
        name: json["name"],
        type: typeValues.map[json["type"]]!,
        humanReadableCardType: humanReadableCardTypeValues.map[json["humanReadableCardType"]]!,
        frameType: frameTypeValues.map[json["frameType"]]!,
        desc: json["desc"],
        race: raceValues.map[json["race"]]!,
        archetype: json["archetype"],
        ygoprodeckUrl: json["ygoprodeck_url"],
        cardSets: json["card_sets"] == null ? [] : List<CardSet>.from(json["card_sets"]!.map((x) => CardSet.fromJson(x))),
        cardImages: List<CardImage>.from(json["card_images"].map((x) => CardImage.fromJson(x))),
        cardPrices: List<CardPrice>.from(json["card_prices"].map((x) => CardPrice.fromJson(x))),
        typeline: json["typeline"] == null ? [] : List<Typeline>.from(json["typeline"]!.map((x) => typelineValues.map[x]!)),
        atk: json["atk"],
        def: json["def"],
        level: json["level"],
        attribute: attributeValues.map[json["attribute"]]!,
        pendDesc: json["pend_desc"],
        monsterDesc: json["monster_desc"],
        scale: json["scale"],
        linkval: json["linkval"],
        linkmarkers: json["linkmarkers"] == null ? [] : List<Linkmarker>.from(json["linkmarkers"]!.map((x) => linkmarkerValues.map[x]!)),
        banlistInfo: json["banlist_info"] == null ? null : BanlistInfo.fromJson(json["banlist_info"]),
    );

    Map<String, dynamic> toJson() => {
        "id": id,
        "name": name,
        "type": typeValues.reverse[type],
        "humanReadableCardType": humanReadableCardTypeValues.reverse[humanReadableCardType],
        "frameType": frameTypeValues.reverse[frameType],
        "desc": desc,
        "race": raceValues.reverse[race],
        "archetype": archetype,
        "ygoprodeck_url": ygoprodeckUrl,
        "card_sets": cardSets == null ? [] : List<dynamic>.from(cardSets!.map((x) => x.toJson())),
        "card_images": List<dynamic>.from(cardImages.map((x) => x.toJson())),
        "card_prices": List<dynamic>.from(cardPrices.map((x) => x.toJson())),
        "typeline": typeline == null ? [] : List<dynamic>.from(typeline!.map((x) => typelineValues.reverse[x])),
        "atk": atk,
        "def": def,
        "level": level,
        "attribute": attributeValues.reverse[attribute],
        "pend_desc": pendDesc,
        "monster_desc": monsterDesc,
        "scale": scale,
        "linkval": linkval,
        "linkmarkers": linkmarkers == null ? [] : List<dynamic>.from(linkmarkers!.map((x) => linkmarkerValues.reverse[x])),
        "banlist_info": banlistInfo?.toJson(),
    };
}

enum Attribute {
    DARK,
    DIVINE,
    EARTH,
    FIRE,
    LIGHT,
    WATER,
    WIND
}

final attributeValues = EnumValues({
    "DARK": Attribute.DARK,
    "DIVINE": Attribute.DIVINE,
    "EARTH": Attribute.EARTH,
    "FIRE": Attribute.FIRE,
    "LIGHT": Attribute.LIGHT,
    "WATER": Attribute.WATER,
    "WIND": Attribute.WIND
});

class BanlistInfo {
    final Ban? banGoat;
    final Ban? banTcg;
    final Ban? banOcg;

    BanlistInfo({
        this.banGoat,
        this.banTcg,
        this.banOcg,
    });

    factory BanlistInfo.fromJson(Map<String, dynamic> json) => BanlistInfo(
        banGoat: banValues.map[json["ban_goat"]]!,
        banTcg: banValues.map[json["ban_tcg"]]!,
        banOcg: banValues.map[json["ban_ocg"]]!,
    );

    Map<String, dynamic> toJson() => {
        "ban_goat": banValues.reverse[banGoat],
        "ban_tcg": banValues.reverse[banTcg],
        "ban_ocg": banValues.reverse[banOcg],
    };
}

enum Ban {
    FORBIDDEN,
    LIMITED,
    SEMI_LIMITED
}

final banValues = EnumValues({
    "Forbidden": Ban.FORBIDDEN,
    "Limited": Ban.LIMITED,
    "Semi-Limited": Ban.SEMI_LIMITED
});

class CardImage {
    final int id;
    final String imageUrl;
    final String imageUrlSmall;
    final String imageUrlCropped;

    CardImage({
        required this.id,
        required this.imageUrl,
        required this.imageUrlSmall,
        required this.imageUrlCropped,
    });

    factory CardImage.fromJson(Map<String, dynamic> json) => CardImage(
        id: json["id"],
        imageUrl: json["image_url"],
        imageUrlSmall: json["image_url_small"],
        imageUrlCropped: json["image_url_cropped"],
    );

    Map<String, dynamic> toJson() => {
        "id": id,
        "image_url": imageUrl,
        "image_url_small": imageUrlSmall,
        "image_url_cropped": imageUrlCropped,
    };
}

class CardPrice {
    final String cardmarketPrice;
    final String tcgplayerPrice;
    final String ebayPrice;
    final String amazonPrice;
    final String coolstuffincPrice;

    CardPrice({
        required this.cardmarketPrice,
        required this.tcgplayerPrice,
        required this.ebayPrice,
        required this.amazonPrice,
        required this.coolstuffincPrice,
    });

    factory CardPrice.fromJson(Map<String, dynamic> json) => CardPrice(
        cardmarketPrice: json["cardmarket_price"],
        tcgplayerPrice: json["tcgplayer_price"],
        ebayPrice: json["ebay_price"],
        amazonPrice: json["amazon_price"],
        coolstuffincPrice: json["coolstuffinc_price"],
    );

    Map<String, dynamic> toJson() => {
        "cardmarket_price": cardmarketPrice,
        "tcgplayer_price": tcgplayerPrice,
        "ebay_price": ebayPrice,
        "amazon_price": amazonPrice,
        "coolstuffinc_price": coolstuffincPrice,
    };
}

class CardSet {
    final String setName;
    final String setCode;
    final SetRarity setRarity;
    final SetRarityCode setRarityCode;
    final String setPrice;

    CardSet({
        required this.setName,
        required this.setCode,
        required this.setRarity,
        required this.setRarityCode,
        required this.setPrice,
    });

    factory CardSet.fromJson(Map<String, dynamic> json) => CardSet(
        setName: json["set_name"],
        setCode: json["set_code"],
        setRarity: setRarityValues.map[json["set_rarity"]]!,
        setRarityCode: setRarityCodeValues.map[json["set_rarity_code"]]!,
        setPrice: json["set_price"],
    );

    Map<String, dynamic> toJson() => {
        "set_name": setName,
        "set_code": setCode,
        "set_rarity": setRarityValues.reverse[setRarity],
        "set_rarity_code": setRarityCodeValues.reverse[setRarityCode],
        "set_price": setPrice,
    };
}

enum SetRarity {
    COLLECTOR_S_RARE,
    COMMON,
    DUEL_TERMINAL_NORMAL_PARALLEL_RARE,
    DUEL_TERMINAL_NORMAL_RARE_PARALLEL_RARE,
    DUEL_TERMINAL_RARE_PARALLEL_RARE,
    DUEL_TERMINAL_SUPER_PARALLEL_RARE,
    DUEL_TERMINAL_ULTRA_PARALLEL_RARE,
    EUROPEAN_DEBUT,
    EUROPEAN_OCEANIAN_DEBUT,
    EXTRA_SECRET,
    EXTRA_SECRET_RARE,
    GHOST_GOLD_RARE,
    GHOST_RARE,
    GOLD_RARE,
    GOLD_SECRET_RARE,
    MOSAIC_RARE,
    NEW,
    NORMAL_PARALLEL_RARE,
    OCEANIAN_DEBUT,
    PLATINUM_RARE,
    PLATINUM_SECRET_RARE,
    PREMIUM_GOLD_RARE,
    PRISMATIC_SECRET_RARE,
    QUARTER_CENTURY_SECRET_RARE,
    RARE,
    REPRINT,
    SECRET_RARE,
    SHATTERFOIL_RARE,
    SHORT_PRINT,
    STARFOIL,
    STARFOIL_RARE,
    STARLIGHT_RARE,
    SUPER_PARALLEL_RARE,
    SUPER_RARE,
    SUPER_SHORT_PRINT,
    THE_10000_SECRET_RARE,
    ULTIMATE_RARE,
    ULTRA_PARALLEL_RARE,
    ULTRA_RARE,
    ULTRA_RARE_PHARAOH_S_RARE,
    ULTRA_SECRET_RARE
}

final setRarityValues = EnumValues({
    "Collector's Rare": SetRarity.COLLECTOR_S_RARE,
    "Common": SetRarity.COMMON,
    "Duel Terminal Normal Parallel Rare": SetRarity.DUEL_TERMINAL_NORMAL_PARALLEL_RARE,
    "Duel Terminal Normal Rare Parallel Rare": SetRarity.DUEL_TERMINAL_NORMAL_RARE_PARALLEL_RARE,
    "Duel Terminal Rare Parallel Rare": SetRarity.DUEL_TERMINAL_RARE_PARALLEL_RARE,
    "Duel Terminal Super Parallel Rare": SetRarity.DUEL_TERMINAL_SUPER_PARALLEL_RARE,
    "Duel Terminal Ultra Parallel Rare": SetRarity.DUEL_TERMINAL_ULTRA_PARALLEL_RARE,
    "European debut": SetRarity.EUROPEAN_DEBUT,
    "European & Oceanian debut": SetRarity.EUROPEAN_OCEANIAN_DEBUT,
    "Extra Secret": SetRarity.EXTRA_SECRET,
    "Extra Secret Rare": SetRarity.EXTRA_SECRET_RARE,
    "Ghost/Gold Rare": SetRarity.GHOST_GOLD_RARE,
    "Ghost Rare": SetRarity.GHOST_RARE,
    "Gold Rare": SetRarity.GOLD_RARE,
    "Gold Secret Rare": SetRarity.GOLD_SECRET_RARE,
    "Mosaic Rare": SetRarity.MOSAIC_RARE,
    "New": SetRarity.NEW,
    "Normal Parallel Rare": SetRarity.NORMAL_PARALLEL_RARE,
    "Oceanian debut": SetRarity.OCEANIAN_DEBUT,
    "Platinum Rare": SetRarity.PLATINUM_RARE,
    "Platinum Secret Rare": SetRarity.PLATINUM_SECRET_RARE,
    "Premium Gold Rare": SetRarity.PREMIUM_GOLD_RARE,
    "Prismatic Secret Rare": SetRarity.PRISMATIC_SECRET_RARE,
    "Quarter Century Secret Rare": SetRarity.QUARTER_CENTURY_SECRET_RARE,
    "Rare": SetRarity.RARE,
    "Reprint": SetRarity.REPRINT,
    "Secret Rare": SetRarity.SECRET_RARE,
    "Shatterfoil Rare": SetRarity.SHATTERFOIL_RARE,
    "Short Print": SetRarity.SHORT_PRINT,
    "Starfoil": SetRarity.STARFOIL,
    "Starfoil Rare": SetRarity.STARFOIL_RARE,
    "Starlight Rare": SetRarity.STARLIGHT_RARE,
    "Super Parallel Rare": SetRarity.SUPER_PARALLEL_RARE,
    "Super Rare": SetRarity.SUPER_RARE,
    "Super Short Print": SetRarity.SUPER_SHORT_PRINT,
    "10000 Secret Rare": SetRarity.THE_10000_SECRET_RARE,
    "Ultimate Rare": SetRarity.ULTIMATE_RARE,
    "Ultra Parallel Rare": SetRarity.ULTRA_PARALLEL_RARE,
    "Ultra Rare": SetRarity.ULTRA_RARE,
    "Ultra Rare (Pharaoh's Rare)": SetRarity.ULTRA_RARE_PHARAOH_S_RARE,
    "Ultra Secret Rare": SetRarity.ULTRA_SECRET_RARE
});

enum SetRarityCode {
    C,
    CR,
    DNPR,
    DRPR,
    DSPR,
    DUPR,
    EMPTY,
    GGR,
    GR,
    GUR,
    G_SC_R,
    MSR,
    PG,
    PIR,
    PS,
    P_SC_R,
    R,
    SC_R,
    SFR,
    SHR,
    SP,
    SPR,
    SR,
    SSP,
    ST_R,
    THE_10000_SC_R,
    UPR,
    UR,
    UT_R,
    U_SC_R
}

final setRarityCodeValues = EnumValues({
    "(C)": SetRarityCode.C,
    "(CR)": SetRarityCode.CR,
    "(DNPR)": SetRarityCode.DNPR,
    "(DRPR)": SetRarityCode.DRPR,
    "(DSPR)": SetRarityCode.DSPR,
    "(DUPR)": SetRarityCode.DUPR,
    "": SetRarityCode.EMPTY,
    "(GGR)": SetRarityCode.GGR,
    "(GR)": SetRarityCode.GR,
    "(GUR)": SetRarityCode.GUR,
    "(GScR)": SetRarityCode.G_SC_R,
    "(MSR)": SetRarityCode.MSR,
    "(PG)": SetRarityCode.PG,
    "(PIR)": SetRarityCode.PIR,
    "(PS)": SetRarityCode.PS,
    "(PScR)": SetRarityCode.P_SC_R,
    "(R)": SetRarityCode.R,
    "(ScR)": SetRarityCode.SC_R,
    "(SFR)": SetRarityCode.SFR,
    "(SHR)": SetRarityCode.SHR,
    "(SP)": SetRarityCode.SP,
    "(SPR)": SetRarityCode.SPR,
    "(SR)": SetRarityCode.SR,
    "(SSP)": SetRarityCode.SSP,
    "(StR)": SetRarityCode.ST_R,
    "(10000ScR)": SetRarityCode.THE_10000_SC_R,
    "(UPR)": SetRarityCode.UPR,
    "(UR)": SetRarityCode.UR,
    "(UtR)": SetRarityCode.UT_R,
    "(UScR)": SetRarityCode.U_SC_R
});

enum FrameType {
    EFFECT,
    EFFECT_PENDULUM,
    FUSION,
    FUSION_PENDULUM,
    LINK,
    NORMAL,
    NORMAL_PENDULUM,
    RITUAL,
    RITUAL_PENDULUM,
    SKILL,
    SPELL,
    SYNCHRO,
    SYNCHRO_PENDULUM,
    TOKEN,
    TRAP,
    XYZ,
    XYZ_PENDULUM
}

final frameTypeValues = EnumValues({
    "effect": FrameType.EFFECT,
    "effect_pendulum": FrameType.EFFECT_PENDULUM,
    "fusion": FrameType.FUSION,
    "fusion_pendulum": FrameType.FUSION_PENDULUM,
    "link": FrameType.LINK,
    "normal": FrameType.NORMAL,
    "normal_pendulum": FrameType.NORMAL_PENDULUM,
    "ritual": FrameType.RITUAL,
    "ritual_pendulum": FrameType.RITUAL_PENDULUM,
    "skill": FrameType.SKILL,
    "spell": FrameType.SPELL,
    "synchro": FrameType.SYNCHRO,
    "synchro_pendulum": FrameType.SYNCHRO_PENDULUM,
    "token": FrameType.TOKEN,
    "trap": FrameType.TRAP,
    "xyz": FrameType.XYZ,
    "xyz_pendulum": FrameType.XYZ_PENDULUM
});

enum HumanReadableCardType {
    CONTINUOUS_SPELL,
    CONTINUOUS_TRAP,
    COUNTER_TRAP,
    EFFECT_MONSTER,
    EQUIP_SPELL,
    FIELD_SPELL,
    FLIP_EFFECT_MONSTER,
    FUSION_EFFECT_MONSTER,
    FUSION_MONSTER,
    FUSION_PENDULUM_EFFECT_MONSTER,
    GEMINI_EFFECT_MONSTER,
    LINK_EFFECT_MONSTER,
    LINK_MONSTER,
    NORMAL_MONSTER,
    NORMAL_SPELL,
    NORMAL_TRAP,
    PENDULUM_EFFECT_MONSTER,
    PENDULUM_FLIP_EFFECT_MONSTER,
    PENDULUM_NORMAL_MONSTER,
    PENDULUM_TUNER_EFFECT_MONSTER,
    QUICK_PLAY_SPELL,
    RITUAL_EFFECT_MONSTER,
    RITUAL_MONSTER,
    RITUAL_PENDULUM_EFFECT_MONSTER,
    RITUAL_SPELL,
    SKILL,
    SKILL_ABIDOS_THE_TH,
    SKILL_ADRIAN_GECKO,
    SKILL_ALEXIS_RHODES,
    SKILL_AMNAEL,
    SKILL_ANDREW,
    SKILL_ARKANA,
    SKILL_ASTER_PHOENIX,
    SKILL_AXEL_BRODIE,
    SKILL_BASTION_MISAW,
    SKILL_BONZ,
    SKILL_CAMULA,
    SKILL_CHAZZ_PRINCET,
    SKILL_CHRISTINE,
    SKILL_CHUMLEY_HUFFI,
    SKILL_DAVID,
    SKILL_DON_ZALOOG,
    SKILL_DR_VELLIAN_C,
    SKILL_EMMA,
    SKILL_ESPA_ROBA,
    SKILL_ISHIZU,
    SKILL_ISHIZU_ISHTAR,
    SKILL_JADEN_YUKI,
    SKILL_JESSE_ANDERSO,
    SKILL_JOEY,
    SKILL_JOEY_WHEELER,
    SKILL_KAGEMARU,
    SKILL_KAIBA,
    SKILL_KEITH,
    SKILL_LUMIS_AND_UMB,
    SKILL_LUMIS_UMBRA,
    SKILL_MAI,
    SKILL_MAI_VALENTINE,
    SKILL_MAKO,
    SKILL_NIGHTSHROUD,
    SKILL_ODION,
    SKILL_PARADOX_BROTH,
    SKILL_PEGASUS,
    SKILL_REX,
    SKILL_SETO_KAIBA,
    SKILL_SYRUS_TRUESDA,
    SKILL_TANIA,
    SKILL_TEA_GARDNER,
    SKILL_THELONIOUS_VI,
    SKILL_THE_SUPREME_K,
    SKILL_TITAN,
    SKILL_TYRANNO_HASSL,
    SKILL_WEEVIL,
    SKILL_YAMI_BAKURA,
    SKILL_YAMI_MARIK,
    SKILL_YAMI_YUGI,
    SKILL_YUBEL,
    SKILL_YUGI,
    SKILL_ZANE_TRUESDAL,
    SPIRIT_EFFECT_MONSTER,
    SYNCHRO_EFFECT_MONSTER,
    SYNCHRO_MONSTER,
    SYNCHRO_PENDULUM_EFFECT_MONSTER,
    SYNCHRO_TUNER_EFFECT_MONSTER,
    TOKEN,
    TOON_EFFECT_MONSTER,
    TRAP,
    TUNER_EFFECT_MONSTER,
    TUNER_NORMAL_MONSTER,
    UNION_EFFECT_MONSTER,
    XYZ_EFFECT_MONSTER,
    XYZ_MONSTER,
    XYZ_PENDULUM_EFFECT_MONSTER
}

final humanReadableCardTypeValues = EnumValues({
    "Continuous Spell": HumanReadableCardType.CONTINUOUS_SPELL,
    "Continuous Trap": HumanReadableCardType.CONTINUOUS_TRAP,
    "Counter Trap": HumanReadableCardType.COUNTER_TRAP,
    "Effect Monster": HumanReadableCardType.EFFECT_MONSTER,
    "Equip Spell": HumanReadableCardType.EQUIP_SPELL,
    "Field Spell": HumanReadableCardType.FIELD_SPELL,
    "Flip Effect Monster": HumanReadableCardType.FLIP_EFFECT_MONSTER,
    "Fusion Effect Monster": HumanReadableCardType.FUSION_EFFECT_MONSTER,
    "Fusion Monster": HumanReadableCardType.FUSION_MONSTER,
    "Fusion Pendulum Effect Monster": HumanReadableCardType.FUSION_PENDULUM_EFFECT_MONSTER,
    "Gemini Effect Monster": HumanReadableCardType.GEMINI_EFFECT_MONSTER,
    "Link Effect Monster": HumanReadableCardType.LINK_EFFECT_MONSTER,
    "Link Monster": HumanReadableCardType.LINK_MONSTER,
    "Normal Monster": HumanReadableCardType.NORMAL_MONSTER,
    "Normal Spell": HumanReadableCardType.NORMAL_SPELL,
    "Normal Trap": HumanReadableCardType.NORMAL_TRAP,
    "Pendulum Effect Monster": HumanReadableCardType.PENDULUM_EFFECT_MONSTER,
    "Pendulum Flip Effect Monster": HumanReadableCardType.PENDULUM_FLIP_EFFECT_MONSTER,
    "Pendulum Normal Monster": HumanReadableCardType.PENDULUM_NORMAL_MONSTER,
    "Pendulum Tuner Effect Monster": HumanReadableCardType.PENDULUM_TUNER_EFFECT_MONSTER,
    "Quick-Play Spell": HumanReadableCardType.QUICK_PLAY_SPELL,
    "Ritual Effect Monster": HumanReadableCardType.RITUAL_EFFECT_MONSTER,
    "Ritual Monster": HumanReadableCardType.RITUAL_MONSTER,
    "Ritual Pendulum Effect Monster": HumanReadableCardType.RITUAL_PENDULUM_EFFECT_MONSTER,
    "Ritual Spell": HumanReadableCardType.RITUAL_SPELL,
    "Skill - ": HumanReadableCardType.SKILL,
    "Skill - Abidos the Th": HumanReadableCardType.SKILL_ABIDOS_THE_TH,
    "Skill - Adrian Gecko": HumanReadableCardType.SKILL_ADRIAN_GECKO,
    "Skill - Alexis Rhodes": HumanReadableCardType.SKILL_ALEXIS_RHODES,
    "Skill - Amnael": HumanReadableCardType.SKILL_AMNAEL,
    "Skill - Andrew": HumanReadableCardType.SKILL_ANDREW,
    "Skill - Arkana": HumanReadableCardType.SKILL_ARKANA,
    "Skill - Aster Phoenix": HumanReadableCardType.SKILL_ASTER_PHOENIX,
    "Skill - Axel Brodie": HumanReadableCardType.SKILL_AXEL_BRODIE,
    "Skill - Bastion Misaw": HumanReadableCardType.SKILL_BASTION_MISAW,
    "Skill - Bonz": HumanReadableCardType.SKILL_BONZ,
    "Skill - Camula": HumanReadableCardType.SKILL_CAMULA,
    "Skill - Chazz Princet": HumanReadableCardType.SKILL_CHAZZ_PRINCET,
    "Skill - Christine": HumanReadableCardType.SKILL_CHRISTINE,
    "Skill - Chumley Huffi": HumanReadableCardType.SKILL_CHUMLEY_HUFFI,
    "Skill - David": HumanReadableCardType.SKILL_DAVID,
    "Skill - Don Zaloog": HumanReadableCardType.SKILL_DON_ZALOOG,
    "Skill - Dr. Vellian C": HumanReadableCardType.SKILL_DR_VELLIAN_C,
    "Skill - Emma": HumanReadableCardType.SKILL_EMMA,
    "Skill - Espa Roba": HumanReadableCardType.SKILL_ESPA_ROBA,
    "Skill - Ishizu": HumanReadableCardType.SKILL_ISHIZU,
    "Skill - Ishizu Ishtar": HumanReadableCardType.SKILL_ISHIZU_ISHTAR,
    "Skill - Jaden Yuki": HumanReadableCardType.SKILL_JADEN_YUKI,
    "Skill - Jesse Anderso": HumanReadableCardType.SKILL_JESSE_ANDERSO,
    "Skill - Joey": HumanReadableCardType.SKILL_JOEY,
    "Skill - Joey Wheeler": HumanReadableCardType.SKILL_JOEY_WHEELER,
    "Skill - Kagemaru": HumanReadableCardType.SKILL_KAGEMARU,
    "Skill - Kaiba": HumanReadableCardType.SKILL_KAIBA,
    "Skill - Keith": HumanReadableCardType.SKILL_KEITH,
    "Skill - Lumis and Umb": HumanReadableCardType.SKILL_LUMIS_AND_UMB,
    "Skill - Lumis Umbra": HumanReadableCardType.SKILL_LUMIS_UMBRA,
    "Skill - Mai": HumanReadableCardType.SKILL_MAI,
    "Skill - Mai Valentine": HumanReadableCardType.SKILL_MAI_VALENTINE,
    "Skill - Mako": HumanReadableCardType.SKILL_MAKO,
    "Skill - Nightshroud": HumanReadableCardType.SKILL_NIGHTSHROUD,
    "Skill - Odion": HumanReadableCardType.SKILL_ODION,
    "Skill - Paradox Broth": HumanReadableCardType.SKILL_PARADOX_BROTH,
    "Skill - Pegasus": HumanReadableCardType.SKILL_PEGASUS,
    "Skill - Rex": HumanReadableCardType.SKILL_REX,
    "Skill - Seto Kaiba": HumanReadableCardType.SKILL_SETO_KAIBA,
    "Skill - Syrus Truesda": HumanReadableCardType.SKILL_SYRUS_TRUESDA,
    "Skill - Tania": HumanReadableCardType.SKILL_TANIA,
    "Skill - Tea Gardner": HumanReadableCardType.SKILL_TEA_GARDNER,
    "Skill - Thelonious Vi": HumanReadableCardType.SKILL_THELONIOUS_VI,
    "Skill - The Supreme K": HumanReadableCardType.SKILL_THE_SUPREME_K,
    "Skill - Titan": HumanReadableCardType.SKILL_TITAN,
    "Skill - Tyranno Hassl": HumanReadableCardType.SKILL_TYRANNO_HASSL,
    "Skill - Weevil": HumanReadableCardType.SKILL_WEEVIL,
    "Skill - Yami Bakura": HumanReadableCardType.SKILL_YAMI_BAKURA,
    "Skill - Yami Marik": HumanReadableCardType.SKILL_YAMI_MARIK,
    "Skill - Yami Yugi": HumanReadableCardType.SKILL_YAMI_YUGI,
    "Skill - Yubel": HumanReadableCardType.SKILL_YUBEL,
    "Skill - Yugi": HumanReadableCardType.SKILL_YUGI,
    "Skill - Zane Truesdal": HumanReadableCardType.SKILL_ZANE_TRUESDAL,
    "Spirit Effect Monster": HumanReadableCardType.SPIRIT_EFFECT_MONSTER,
    "Synchro Effect Monster": HumanReadableCardType.SYNCHRO_EFFECT_MONSTER,
    "Synchro Monster": HumanReadableCardType.SYNCHRO_MONSTER,
    "Synchro Pendulum Effect Monster": HumanReadableCardType.SYNCHRO_PENDULUM_EFFECT_MONSTER,
    "Synchro Tuner Effect Monster": HumanReadableCardType.SYNCHRO_TUNER_EFFECT_MONSTER,
    "Token": HumanReadableCardType.TOKEN,
    "Toon Effect Monster": HumanReadableCardType.TOON_EFFECT_MONSTER,
    " Trap": HumanReadableCardType.TRAP,
    "Tuner Effect Monster": HumanReadableCardType.TUNER_EFFECT_MONSTER,
    "Tuner Normal Monster": HumanReadableCardType.TUNER_NORMAL_MONSTER,
    "Union Effect Monster": HumanReadableCardType.UNION_EFFECT_MONSTER,
    "Xyz Effect Monster": HumanReadableCardType.XYZ_EFFECT_MONSTER,
    "Xyz Monster": HumanReadableCardType.XYZ_MONSTER,
    "Xyz Pendulum Effect Monster": HumanReadableCardType.XYZ_PENDULUM_EFFECT_MONSTER
});

enum Linkmarker {
    BOTTOM,
    BOTTOM_LEFT,
    BOTTOM_RIGHT,
    LEFT,
    RIGHT,
    TOP,
    TOP_LEFT,
    TOP_RIGHT
}

final linkmarkerValues = EnumValues({
    "Bottom": Linkmarker.BOTTOM,
    "Bottom-Left": Linkmarker.BOTTOM_LEFT,
    "Bottom-Right": Linkmarker.BOTTOM_RIGHT,
    "Left": Linkmarker.LEFT,
    "Right": Linkmarker.RIGHT,
    "Top": Linkmarker.TOP,
    "Top-Left": Linkmarker.TOP_LEFT,
    "Top-Right": Linkmarker.TOP_RIGHT
});

enum Race {
    ABIDOS_THE_TH,
    ADRIAN_GECKO,
    ALEXIS_RHODES,
    AMNAEL,
    ANDREW,
    AQUA,
    ARKANA,
    ASTER_PHOENIX,
    AXEL_BRODIE,
    BASTION_MISAW,
    BEAST,
    BEAST_WARRIOR,
    BONZ,
    CAMULA,
    CHAZZ_PRINCET,
    CHRISTINE,
    CHUMLEY_HUFFI,
    CONTINUOUS,
    COUNTER,
    CREATOR_GOD,
    CYBERSE,
    DAVID,
    DINOSAUR,
    DIVINE_BEAST,
    DON_ZALOOG,
    DRAGON,
    DR_VELLIAN_C,
    EMMA,
    EMPTY,
    EQUIP,
    ESPA_ROBA,
    FAIRY,
    FIELD,
    FIEND,
    FISH,
    ILLUSION,
    INSECT,
    ISHIZU,
    ISHIZU_ISHTAR,
    JADEN_YUKI,
    JESSE_ANDERSO,
    JOEY,
    JOEY_WHEELER,
    KAGEMARU,
    KAIBA,
    KEITH,
    LUMIS_AND_UMB,
    LUMIS_UMBRA,
    MACHINE,
    MAI,
    MAI_VALENTINE,
    MAKO,
    NIGHTSHROUD,
    NORMAL,
    ODION,
    PARADOX_BROTH,
    PEGASUS,
    PLANT,
    PSYCHIC,
    PYRO,
    QUICK_PLAY,
    REPTILE,
    REX,
    RITUAL,
    ROCK,
    SEA_SERPENT,
    SETO_KAIBA,
    SPELLCASTER,
    SYRUS_TRUESDA,
    TANIA,
    TEA_GARDNER,
    THELONIOUS_VI,
    THE_SUPREME_K,
    THUNDER,
    TITAN,
    TYRANNO_HASSL,
    WARRIOR,
    WEEVIL,
    WINGED_BEAST,
    WYRM,
    YAMI_BAKURA,
    YAMI_MARIK,
    YAMI_YUGI,
    YUBEL,
    YUGI,
    ZANE_TRUESDAL,
    ZOMBIE
}

final raceValues = EnumValues({
    "Abidos the Th": Race.ABIDOS_THE_TH,
    "Adrian Gecko": Race.ADRIAN_GECKO,
    "Alexis Rhodes": Race.ALEXIS_RHODES,
    "Amnael": Race.AMNAEL,
    "Andrew": Race.ANDREW,
    "Aqua": Race.AQUA,
    "Arkana": Race.ARKANA,
    "Aster Phoenix": Race.ASTER_PHOENIX,
    "Axel Brodie": Race.AXEL_BRODIE,
    "Bastion Misaw": Race.BASTION_MISAW,
    "Beast": Race.BEAST,
    "Beast-Warrior": Race.BEAST_WARRIOR,
    "Bonz": Race.BONZ,
    "Camula": Race.CAMULA,
    "Chazz Princet": Race.CHAZZ_PRINCET,
    "Christine": Race.CHRISTINE,
    "Chumley Huffi": Race.CHUMLEY_HUFFI,
    "Continuous": Race.CONTINUOUS,
    "Counter": Race.COUNTER,
    "Creator God": Race.CREATOR_GOD,
    "Cyberse": Race.CYBERSE,
    "David": Race.DAVID,
    "Dinosaur": Race.DINOSAUR,
    "Divine-Beast": Race.DIVINE_BEAST,
    "Don Zaloog": Race.DON_ZALOOG,
    "Dragon": Race.DRAGON,
    "Dr. Vellian C": Race.DR_VELLIAN_C,
    "Emma": Race.EMMA,
    "": Race.EMPTY,
    "Equip": Race.EQUIP,
    "Espa Roba": Race.ESPA_ROBA,
    "Fairy": Race.FAIRY,
    "Field": Race.FIELD,
    "Fiend": Race.FIEND,
    "Fish": Race.FISH,
    "Illusion": Race.ILLUSION,
    "Insect": Race.INSECT,
    "Ishizu": Race.ISHIZU,
    "Ishizu Ishtar": Race.ISHIZU_ISHTAR,
    "Jaden Yuki": Race.JADEN_YUKI,
    "Jesse Anderso": Race.JESSE_ANDERSO,
    "Joey": Race.JOEY,
    "Joey Wheeler": Race.JOEY_WHEELER,
    "Kagemaru": Race.KAGEMARU,
    "Kaiba": Race.KAIBA,
    "Keith": Race.KEITH,
    "Lumis and Umb": Race.LUMIS_AND_UMB,
    "Lumis Umbra": Race.LUMIS_UMBRA,
    "Machine": Race.MACHINE,
    "Mai": Race.MAI,
    "Mai Valentine": Race.MAI_VALENTINE,
    "Mako": Race.MAKO,
    "Nightshroud": Race.NIGHTSHROUD,
    "Normal": Race.NORMAL,
    "Odion": Race.ODION,
    "Paradox Broth": Race.PARADOX_BROTH,
    "Pegasus": Race.PEGASUS,
    "Plant": Race.PLANT,
    "Psychic": Race.PSYCHIC,
    "Pyro": Race.PYRO,
    "Quick-Play": Race.QUICK_PLAY,
    "Reptile": Race.REPTILE,
    "Rex": Race.REX,
    "Ritual": Race.RITUAL,
    "Rock": Race.ROCK,
    "Sea Serpent": Race.SEA_SERPENT,
    "Seto Kaiba": Race.SETO_KAIBA,
    "Spellcaster": Race.SPELLCASTER,
    "Syrus Truesda": Race.SYRUS_TRUESDA,
    "Tania": Race.TANIA,
    "Tea Gardner": Race.TEA_GARDNER,
    "Thelonious Vi": Race.THELONIOUS_VI,
    "The Supreme K": Race.THE_SUPREME_K,
    "Thunder": Race.THUNDER,
    "Titan": Race.TITAN,
    "Tyranno Hassl": Race.TYRANNO_HASSL,
    "Warrior": Race.WARRIOR,
    "Weevil": Race.WEEVIL,
    "Winged Beast": Race.WINGED_BEAST,
    "Wyrm": Race.WYRM,
    "Yami Bakura": Race.YAMI_BAKURA,
    "Yami Marik": Race.YAMI_MARIK,
    "Yami Yugi": Race.YAMI_YUGI,
    "Yubel": Race.YUBEL,
    "Yugi": Race.YUGI,
    "Zane Truesdal": Race.ZANE_TRUESDAL,
    "Zombie": Race.ZOMBIE
});

enum Type {
    EFFECT_MONSTER,
    FLIP_EFFECT_MONSTER,
    FUSION_MONSTER,
    GEMINI_MONSTER,
    LINK_MONSTER,
    NORMAL_MONSTER,
    NORMAL_TUNER_MONSTER,
    PENDULUM_EFFECT_FUSION_MONSTER,
    PENDULUM_EFFECT_MONSTER,
    PENDULUM_EFFECT_RITUAL_MONSTER,
    PENDULUM_FLIP_EFFECT_MONSTER,
    PENDULUM_NORMAL_MONSTER,
    PENDULUM_TUNER_EFFECT_MONSTER,
    RITUAL_EFFECT_MONSTER,
    RITUAL_MONSTER,
    SKILL_CARD,
    SPELL_CARD,
    SPIRIT_MONSTER,
    SYNCHRO_MONSTER,
    SYNCHRO_PENDULUM_EFFECT_MONSTER,
    SYNCHRO_TUNER_MONSTER,
    TOKEN,
    TOON_MONSTER,
    TRAP_CARD,
    TUNER_MONSTER,
    UNION_EFFECT_MONSTER,
    XYZ_MONSTER,
    XYZ_PENDULUM_EFFECT_MONSTER
}

final typeValues = EnumValues({
    "Effect Monster": Type.EFFECT_MONSTER,
    "Flip Effect Monster": Type.FLIP_EFFECT_MONSTER,
    "Fusion Monster": Type.FUSION_MONSTER,
    "Gemini Monster": Type.GEMINI_MONSTER,
    "Link Monster": Type.LINK_MONSTER,
    "Normal Monster": Type.NORMAL_MONSTER,
    "Normal Tuner Monster": Type.NORMAL_TUNER_MONSTER,
    "Pendulum Effect Fusion Monster": Type.PENDULUM_EFFECT_FUSION_MONSTER,
    "Pendulum Effect Monster": Type.PENDULUM_EFFECT_MONSTER,
    "Pendulum Effect Ritual Monster": Type.PENDULUM_EFFECT_RITUAL_MONSTER,
    "Pendulum Flip Effect Monster": Type.PENDULUM_FLIP_EFFECT_MONSTER,
    "Pendulum Normal Monster": Type.PENDULUM_NORMAL_MONSTER,
    "Pendulum Tuner Effect Monster": Type.PENDULUM_TUNER_EFFECT_MONSTER,
    "Ritual Effect Monster": Type.RITUAL_EFFECT_MONSTER,
    "Ritual Monster": Type.RITUAL_MONSTER,
    "Skill Card": Type.SKILL_CARD,
    "Spell Card": Type.SPELL_CARD,
    "Spirit Monster": Type.SPIRIT_MONSTER,
    "Synchro Monster": Type.SYNCHRO_MONSTER,
    "Synchro Pendulum Effect Monster": Type.SYNCHRO_PENDULUM_EFFECT_MONSTER,
    "Synchro Tuner Monster": Type.SYNCHRO_TUNER_MONSTER,
    "Token": Type.TOKEN,
    "Toon Monster": Type.TOON_MONSTER,
    "Trap Card": Type.TRAP_CARD,
    "Tuner Monster": Type.TUNER_MONSTER,
    "Union Effect Monster": Type.UNION_EFFECT_MONSTER,
    "XYZ Monster": Type.XYZ_MONSTER,
    "XYZ Pendulum Effect Monster": Type.XYZ_PENDULUM_EFFECT_MONSTER
});

enum Typeline {
    AQUA,
    BEAST,
    BEAST_WARRIOR,
    CREATOR_GOD,
    CYBERSE,
    DINOSAUR,
    DIVINE_BEAST,
    DRAGON,
    EFFECT,
    FAIRY,
    FIEND,
    FISH,
    FLIP,
    FUSION,
    GEMINI,
    ILLUSION,
    INSECT,
    LINK,
    MACHINE,
    NORMAL,
    PENDULUM,
    PLANT,
    PSYCHIC,
    PYRO,
    REPTILE,
    RITUAL,
    ROCK,
    SEA_SERPENT,
    SPELLCASTER,
    SPIRIT,
    SYNCHRO,
    THUNDER,
    TOON,
    TUNER,
    UNION,
    WARRIOR,
    WINGED_BEAST,
    WYRM,
    XYZ,
    ZOMBIE
}

final typelineValues = EnumValues({
    "Aqua": Typeline.AQUA,
    "Beast": Typeline.BEAST,
    "Beast-Warrior": Typeline.BEAST_WARRIOR,
    "Creator God": Typeline.CREATOR_GOD,
    "Cyberse": Typeline.CYBERSE,
    "Dinosaur": Typeline.DINOSAUR,
    "Divine-Beast": Typeline.DIVINE_BEAST,
    "Dragon": Typeline.DRAGON,
    "Effect": Typeline.EFFECT,
    "Fairy": Typeline.FAIRY,
    "Fiend": Typeline.FIEND,
    "Fish": Typeline.FISH,
    "Flip": Typeline.FLIP,
    "Fusion": Typeline.FUSION,
    "Gemini": Typeline.GEMINI,
    "Illusion": Typeline.ILLUSION,
    "Insect": Typeline.INSECT,
    "Link": Typeline.LINK,
    "Machine": Typeline.MACHINE,
    "Normal": Typeline.NORMAL,
    "Pendulum": Typeline.PENDULUM,
    "Plant": Typeline.PLANT,
    "Psychic": Typeline.PSYCHIC,
    "Pyro": Typeline.PYRO,
    "Reptile": Typeline.REPTILE,
    "Ritual": Typeline.RITUAL,
    "Rock": Typeline.ROCK,
    "Sea Serpent": Typeline.SEA_SERPENT,
    "Spellcaster": Typeline.SPELLCASTER,
    "Spirit": Typeline.SPIRIT,
    "Synchro": Typeline.SYNCHRO,
    "Thunder": Typeline.THUNDER,
    "Toon": Typeline.TOON,
    "Tuner": Typeline.TUNER,
    "Union": Typeline.UNION,
    "Warrior": Typeline.WARRIOR,
    "Winged Beast": Typeline.WINGED_BEAST,
    "Wyrm": Typeline.WYRM,
    "Xyz": Typeline.XYZ,
    "Zombie": Typeline.ZOMBIE
});

class EnumValues<T> {
    Map<String, T> map;
    late Map<T, String> reverseMap;

    EnumValues(this.map);

    Map<T, String> get reverse {
            reverseMap = map.map((k, v) => MapEntry(v, k));
            return reverseMap;
    }
}